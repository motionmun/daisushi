from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import os
from config import ADMIN_ID  # –ë–µ—Ä–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    return str(user_id) == str(ADMIN_ID)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return

    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", callback_data="manage_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats")],
        [InlineKeyboardButton(text="üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤", callback_data="view_orders")],
    ])
    
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
@router.callback_query(lambda c: c.data == "manage_menu")
async def manage_menu(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_item")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_price")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="delete_item")]
    ])

    await callback.message.answer("üìú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", reply_markup=menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.callback_query(lambda c: c.data == "view_stats")
async def view_stats(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    conn = sqlite3.connect("data/database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM orders")
    total_orders = cursor.fetchone()[0]

    cursor.execute("SELECT SUM(price) FROM orders")
    total_revenue = cursor.fetchone()[0] or 0

    conn.close()

    await callback.message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüõí –ó–∞–∫–∞–∑–æ–≤: {total_orders}\nüí∞ –í—ã—Ä—É—á–∫–∞: {total_revenue}‚Ç©")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(lambda c: c.data == "view_orders")
async def view_orders(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        return await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    conn = sqlite3.connect("data/database.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, user_id, total_price FROM orders ORDER BY id DESC LIMIT 10")
    orders = cursor.fetchall()
    
    conn.close()

    if not orders:
        await callback.message.answer("üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
    else:
        orders_text = "\n".join([f"üìå –ó–∞–∫–∞–∑ {order[0]}: {order[2]}‚Ç© (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {order[1]})" for order in orders])
        await callback.message.answer(f"üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n{orders_text}")
